/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by apiregister-gen. Do not edit it manually!

package deployment

import (
	"fmt"
	"github.com/kubernetes-incubator/apiserver-builder/pkg/builders"
	"k8s.io/apimachinery/pkg/apis/meta/internalversion"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver/pkg/endpoints/request"
	"k8s.io/apiserver/pkg/registry/rest"
)

var (
	InternalDirector = builders.NewInternalResource(
		"directors",
		"Director",
		func() runtime.Object { return &Director{} },
		func() runtime.Object { return &DirectorList{} },
	)
	InternalDirectorStatus = builders.NewInternalResourceStatus(
		"directors",
		"DirectorStatus",
		func() runtime.Object { return &Director{} },
		func() runtime.Object { return &DirectorList{} },
	)
	InternalDocker = builders.NewInternalResource(
		"dockers",
		"Docker",
		func() runtime.Object { return &Docker{} },
		func() runtime.Object { return &DockerList{} },
	)
	InternalDockerStatus = builders.NewInternalResourceStatus(
		"dockers",
		"DockerStatus",
		func() runtime.Object { return &Docker{} },
		func() runtime.Object { return &DockerList{} },
	)
	InternalVirtualhost = builders.NewInternalResource(
		"virtualhosts",
		"Virtualhost",
		func() runtime.Object { return &Virtualhost{} },
		func() runtime.Object { return &VirtualhostList{} },
	)
	InternalVirtualhostStatus = builders.NewInternalResourceStatus(
		"virtualhosts",
		"VirtualhostStatus",
		func() runtime.Object { return &Virtualhost{} },
		func() runtime.Object { return &VirtualhostList{} },
	)
	// Registered resources and subresources
	ApiVersion = builders.NewApiGroup("deployment.servicefabrik.io").WithKinds(
		InternalDirector,
		InternalDirectorStatus,
		InternalDocker,
		InternalDockerStatus,
		InternalVirtualhost,
		InternalVirtualhostStatus,
	)

	// Required by code generated by go2idl
	AddToScheme        = ApiVersion.SchemaBuilder.AddToScheme
	SchemeBuilder      = ApiVersion.SchemaBuilder
	localSchemeBuilder = &SchemeBuilder
	SchemeGroupVersion = ApiVersion.GroupVersion
)

// Required by code generated by go2idl
// Kind takes an unqualified kind and returns a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Required by code generated by go2idl
// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type Docker struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   DockerSpec
	Status DockerStatus
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type Director struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   DirectorSpec
	Status DirectorStatus
}

type DockerStatus struct {
	State         string
	LastOperation string
	Response      string
}

type DirectorStatus struct {
	State         string
	LastOperation string
	Response      string
}

type DirectorSpec struct {
	Options string
}

type DockerSpec struct {
	Options string
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type Virtualhost struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   VirtualhostSpec
	Status VirtualhostStatus
}

type VirtualhostSpec struct {
	Options string
}

type VirtualhostStatus struct {
	State         string
	Error         string
	LastOperation string
	Response      string
}

//
// Director Functions and Structs
//
// +k8s:deepcopy-gen=false
type DirectorStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type DirectorStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type DirectorList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Director
}

func (Director) NewStatus() interface{} {
	return DirectorStatus{}
}

func (pc *Director) GetStatus() interface{} {
	return pc.Status
}

func (pc *Director) SetStatus(s interface{}) {
	pc.Status = s.(DirectorStatus)
}

func (pc *Director) GetSpec() interface{} {
	return pc.Spec
}

func (pc *Director) SetSpec(s interface{}) {
	pc.Spec = s.(DirectorSpec)
}

func (pc *Director) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *Director) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc Director) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store Director.
// +k8s:deepcopy-gen=false
type DirectorRegistry interface {
	ListDirectors(ctx request.Context, options *internalversion.ListOptions) (*DirectorList, error)
	GetDirector(ctx request.Context, id string, options *metav1.GetOptions) (*Director, error)
	CreateDirector(ctx request.Context, id *Director) (*Director, error)
	UpdateDirector(ctx request.Context, id *Director) (*Director, error)
	DeleteDirector(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewDirectorRegistry(sp builders.StandardStorageProvider) DirectorRegistry {
	return &storageDirector{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageDirector struct {
	builders.StandardStorageProvider
}

func (s *storageDirector) ListDirectors(ctx request.Context, options *internalversion.ListOptions) (*DirectorList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*DirectorList), err
}

func (s *storageDirector) GetDirector(ctx request.Context, id string, options *metav1.GetOptions) (*Director, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*Director), nil
}

func (s *storageDirector) CreateDirector(ctx request.Context, object *Director) (*Director, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, true)
	if err != nil {
		return nil, err
	}
	return obj.(*Director), nil
}

func (s *storageDirector) UpdateDirector(ctx request.Context, object *Director) (*Director, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil)
	if err != nil {
		return nil, err
	}
	return obj.(*Director), nil
}

func (s *storageDirector) DeleteDirector(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}

//
// Docker Functions and Structs
//
// +k8s:deepcopy-gen=false
type DockerStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type DockerStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type DockerList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Docker
}

func (Docker) NewStatus() interface{} {
	return DockerStatus{}
}

func (pc *Docker) GetStatus() interface{} {
	return pc.Status
}

func (pc *Docker) SetStatus(s interface{}) {
	pc.Status = s.(DockerStatus)
}

func (pc *Docker) GetSpec() interface{} {
	return pc.Spec
}

func (pc *Docker) SetSpec(s interface{}) {
	pc.Spec = s.(DockerSpec)
}

func (pc *Docker) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *Docker) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc Docker) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store Docker.
// +k8s:deepcopy-gen=false
type DockerRegistry interface {
	ListDockers(ctx request.Context, options *internalversion.ListOptions) (*DockerList, error)
	GetDocker(ctx request.Context, id string, options *metav1.GetOptions) (*Docker, error)
	CreateDocker(ctx request.Context, id *Docker) (*Docker, error)
	UpdateDocker(ctx request.Context, id *Docker) (*Docker, error)
	DeleteDocker(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewDockerRegistry(sp builders.StandardStorageProvider) DockerRegistry {
	return &storageDocker{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageDocker struct {
	builders.StandardStorageProvider
}

func (s *storageDocker) ListDockers(ctx request.Context, options *internalversion.ListOptions) (*DockerList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*DockerList), err
}

func (s *storageDocker) GetDocker(ctx request.Context, id string, options *metav1.GetOptions) (*Docker, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*Docker), nil
}

func (s *storageDocker) CreateDocker(ctx request.Context, object *Docker) (*Docker, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, true)
	if err != nil {
		return nil, err
	}
	return obj.(*Docker), nil
}

func (s *storageDocker) UpdateDocker(ctx request.Context, object *Docker) (*Docker, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil)
	if err != nil {
		return nil, err
	}
	return obj.(*Docker), nil
}

func (s *storageDocker) DeleteDocker(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}

//
// Virtualhost Functions and Structs
//
// +k8s:deepcopy-gen=false
type VirtualhostStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type VirtualhostStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type VirtualhostList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Virtualhost
}

func (Virtualhost) NewStatus() interface{} {
	return VirtualhostStatus{}
}

func (pc *Virtualhost) GetStatus() interface{} {
	return pc.Status
}

func (pc *Virtualhost) SetStatus(s interface{}) {
	pc.Status = s.(VirtualhostStatus)
}

func (pc *Virtualhost) GetSpec() interface{} {
	return pc.Spec
}

func (pc *Virtualhost) SetSpec(s interface{}) {
	pc.Spec = s.(VirtualhostSpec)
}

func (pc *Virtualhost) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *Virtualhost) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc Virtualhost) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store Virtualhost.
// +k8s:deepcopy-gen=false
type VirtualhostRegistry interface {
	ListVirtualhosts(ctx request.Context, options *internalversion.ListOptions) (*VirtualhostList, error)
	GetVirtualhost(ctx request.Context, id string, options *metav1.GetOptions) (*Virtualhost, error)
	CreateVirtualhost(ctx request.Context, id *Virtualhost) (*Virtualhost, error)
	UpdateVirtualhost(ctx request.Context, id *Virtualhost) (*Virtualhost, error)
	DeleteVirtualhost(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewVirtualhostRegistry(sp builders.StandardStorageProvider) VirtualhostRegistry {
	return &storageVirtualhost{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageVirtualhost struct {
	builders.StandardStorageProvider
}

func (s *storageVirtualhost) ListVirtualhosts(ctx request.Context, options *internalversion.ListOptions) (*VirtualhostList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*VirtualhostList), err
}

func (s *storageVirtualhost) GetVirtualhost(ctx request.Context, id string, options *metav1.GetOptions) (*Virtualhost, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*Virtualhost), nil
}

func (s *storageVirtualhost) CreateVirtualhost(ctx request.Context, object *Virtualhost) (*Virtualhost, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, true)
	if err != nil {
		return nil, err
	}
	return obj.(*Virtualhost), nil
}

func (s *storageVirtualhost) UpdateVirtualhost(ctx request.Context, object *Virtualhost) (*Virtualhost, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil)
	if err != nil {
		return nil, err
	}
	return obj.(*Virtualhost), nil
}

func (s *storageVirtualhost) DeleteVirtualhost(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}
